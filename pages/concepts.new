from pathlib import Path
import re
from air_markdown import Markdown

import air



def markdown_metadata(file_path: Path) -> dict[str, str]:
    content = Path(file_path).read_text()

    # Match the first header (e.g., # Title)
    title_match = re.search(r'^\s*#\s+(.*)', content, re.MULTILINE)
    title = title_match.group(1).strip() if title_match else None

    # Remove headers and extract the first non-empty paragraph
    content_wo_headers = re.sub(r'^\s*#+\s+.*', '', content, flags=re.MULTILINE)
    paragraphs = [p.strip() for p in content_wo_headers.split('\n\n') if p.strip()]
    description = paragraphs[0] if paragraphs else None

    return {'title': title, 'description': description}



def make_li_from_mdpath(path: Path):
    metadata = markdown_metadata(path)
    return air.Li(air.A(air.Strong(metadata['title']), href=str(path)[6:-3]),
                  ' - ', metadata['description'], 
                  )


def render(request: air.Request):
    files = Path("pages/concepts").glob("*.md")
    links = [make_li_from_mdpath(x) for x in files]
    return air.Children(
        air.Title("Concepts"),
        air.Article(
            air.H1("Concepts"),
            air.P("Why and how Air works."),
            air.Ul(*links),
            class_="prose",
        ),
    )
